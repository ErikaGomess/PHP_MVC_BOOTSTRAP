<?php

namespace App\Http;

use \Closure;
use \Exception;

class Router {

    private $url = '';
    private $prefix = '';
    private $routes = [];
    private $request;

    public function __construct($url) {
        $this->request = new Request();
        $this->url = $url;
        $this->setPrefix();
    }

    private function setPrefix() {
        $parseUrl = parse_url($this->url);

        /*
          echo "<pre>";
          print_r($parseUrl);
          echo "</pre>";
          exit;
         */

        $this->prefix = $parseUrl['port'] ?? '';
    }

    /**
     * Método responsável por adicionar uma rota na classe
     * @param type $method
     * @param type $route
     * @param Closure $params
     */
    public function addRoutes($method, $route, $params = []) {
        //validação dos parâmetros
        foreach ($params as $key => $value) {
            if ($value instanceof Closure) {
                $params['controller'] = $value;
                unset($params[$key]);
                continue;
            }
        }
        
        //padrão de validação da url
        $patternRoute = '/^' . str_replace('/', '\/', $route) . '$/';
        //adiciona a rota dentro da classe
        $this->routes[$patternRoute][$method] = $params;
    }

    /**
     * Método responsável por definir uma rota GET
     * @param type $route
     * @param type $params
     * @return type
     */
    public function get($route, $params = []) {
        return $this->addRoutes('GET', $route, $params);
    }

    /**
     * Método responsável por definir uma rota POST
     * @param type $route
     * @param type $params
     * @return type
     */
    public function post($route, $params = []) {
        return $this->addRoutes('POST', $route, $params);
    }

    /**
     * Método responsável por definir uma rota PUT
     * @param type $route
     * @param type $params
     * @return type
     */
    public function put($route, $params = []) {
        return $this->addRoutes('PUT', $route, $params);
    }

    /**
     * Método responsável por retornar a URI desconsiderando o prefixo
     */
    private function getUri() {
        //URI DA REQUEST
        $uri = $this->request->getUri();

        //FATIA A URI COM PREFIXO
        $xUri = strlen($this->prefix) ? explode($this->prefix, $uri) : [$uri];

        //RETORNA URI SEM PREFIXO
        return end($xUri);
    }

    /**
     * Método responsável por retornar os dados da rota atual
     */
    private function getRoute() {
        //URI
        $uri = $this->getUri();

        //METHOD
        $httpMethod = $this->request->getHttpMethod();

        //VALIDA AS ROTAS
        foreach ($this->routes as $patternRoute => $methods) {
            //VERIFICA SE A URI BATE COM PADRÃO
            if (preg_match($patternRoute, $uri)) {
                //VERIFICA O MÉTODO
                if ($methods[$httpMethod]) {

                    //RETORNA DOS PARÂMETROS DA ROTA
                    return $methods[$httpMethod];
                }
                //MÉTODO NÃO PERMITIDO/DEFINIDO
                throw new Exception("Método não é permitido", 405);
            }
        }
        //URL NÃO ENCONTRADA
        throw new Exception("URL não encontrada", 404);
    }

    /**
     * Método responsável por executar a rota atual
     * @return Response
     */
    public function run() {
        try {
            //OBTEM A ROTA ATUAL
            $route = $this->getRoute();
            
            //VERIFICA O CONTROLADOR
            if (!isset($route['controller'])) {
                throw new Exception("A url não pode ser processada", 500);
            }
            //argumentos da função
            $args = [];

            //retorna a execução da função
            return call_user_func_array($route['controller'], $args);
        } catch (Exception $e) {
            return new Response($e->getCode(), $e->getMessage());
        }
    }

}
