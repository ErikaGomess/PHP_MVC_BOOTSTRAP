<?php

namespace App\Controller\Admin;

use \App\Utils\View;
use \App\Model\Entity\User as EntityUser;
use \WilliamCosta\DatabaseManager\Pagination;



class User extends Page{
    
    /**
     * Método responsável por obter a renderização dos itens de usuários para a página
     * @param Request $request
     * @param Pagination $obPagination
     * @return string
     */
    private static function getUserItems($request,&$obPagination){
        //USUÁRIOS
        $itens = '';
        
        //QUANTIDADE TOTAL DE REGISTRO
        $quantidadetotal = EntityUser::getUsers(null,null,null,'COUNT(*) as qtd')->fetchObject()->qtd;
        
        //PAGINA ATUAL
        $queryParams = $request->getQueryParams();
        $paginaAtual = $queryParams['page'] ?? 1;
        
        //INSTANCIA DE PAGINAÇÃO
        $obPagination = new Pagination($quantidadetotal,$paginaAtual,5);
        
        //RESULTADOS DA PÁGINA
        $results = EntityUser::getTestimonies(null,'id DESC', $obPagination->getLimit());
        
        //RENDERIZA O ITEM
        while($obUser = $results->fetchObject(EntityUser::class)){
            $itens .= View::render('admin/module/users/item', [
                'id'        => $obUser->id,
                'name'      => $obUser->nome,
                'email'  => $obUser->email
            ]);
        }
               
        //RETORNA OS DEPOIMENTOS
        return $itens;
    }
    
    /**
     * Método responsável por renderizar a view de listagem de usuários
     * @param Request $request
     * @return string
     */
    public static function getUsers($request) {
        //CONTEÚDO DA HOME
        $content = View::render('admin/module/users/index',[
            'itens'        => self::getUserItems($request,$obPagination),
            'pagination'   => parent::getPagination($request,$obPagination),
            'status'       => self::getStatus($request)
        ]);
        
        //RETORNAR A PÁGINA COMPLETA
        return parent::getPanel('Usuários > WDEV', $content,'users');
    }
    /**
     * Método responsável por retornar o formuláriode cadastro de um novo usuário
     * @param Request $request
     */
    public static function getNewUser($request){
        //CONTEÚDO DO FORMULÁRIO
        $content = View::render('admin/module/testimonies/form', [
                    'title'     => 'Cadastrar usuário',
                    'nome'      => '',
                    'email'     => '',
                    'status'    => self::getStatus($request)
        ]);
        //RETORNAR A PÁGINA COMPLETA
        return parent::getPanel('Cadastrar usuário > WDEV', $content,'users');
    }
    
     public static function setNewUser($request) {
        //POST VARS
         $postVars = $request->getPostVars();
         $nome = $postVars['nome'] ?? '';
         $email = $postVars['email'] ?? '';
         $senha = $postVars['senha'] ?? '';
         
         //VALIDA O E-MAIL DO USUÁRIO
         $obUser = EntityUser::getUsersByEmail($email);
         if($obUser instanceof EntityUser && $obUser->id != $id){
             //REDIRECIONA O USUÁRIO
              $request->getRouter()->redirect('/admin/users/new?status=dupicated');
         }
         //NOVA INSTANCIA DE USUÁRIO
         $obUser = new EntityUser;
         $obUser->nome = $nome;
         $obUser->email = $email;
         $obUser->senha = password_hash($senha, PASSWORD_DEFAULT);
         $obUser->cadastrar();
         
         //REDIRECIONAR O USUÁRIO
         $request->getRouter()->redirect('/admin/users/'.$obUser->id.'/edit?status=created');
    }
   
    /**
     * Método responsável por retornar a mensagem de status
     * @param Request $request
     * @return string
     */
    private static function getStatus($request){
        //QUERY PARAMS
        $queryParams = $request ->getQueryParams();
        
        //STATUS
        if(!isset($queryParams['status'])) return'';
        
        //MENSAGEM DE STATUS
        switch ($queryParams['status']) {
            case 'create':
                return Alert::getSuccess('Usuário criado com sucesso!');
                break;
            case 'updated':
                return Alert::getSuccess('Usuário atualizado com sucesso!');
                break;
             case 'deleted':
                return Alert::getSuccess('Usuário excluído com sucesso!');
                break;
             case 'duplicated':
                return Alert::getError('O e-mail digitado já possui um usuário.');
                break;
        }
    }
    
    /**
     * Método responsável por retornar o formulário de edição de um usuário
     * @param Request $request
     * @param integer $id
     * @return string
     */
    public static function getEditUser($request, $id){
        //OBTÉM O USUÁRIO DO BANCO DE DADOS
        $obUser = EntityUser::getUsersById($id);
        
        //VALIDA A INSTÂNCIA
        if(!$obUser instanceof EntityUser){
            $request->getRouter()->redirect('/admin/users');
        }
        
        //CONTEÚDO DO FORMULÁRIO
        $content = View::render('admin/module/users/form',[
            'title'     => 'Editar usuário',
            'nome'      => $obUser->nome,
            'email'     => $obUser->email,
            'status'    => self::getStatus($request)
        ]); 
        
        //RETORNAR A PÁGINA COMPLETA
        return parent::getPanel('Editar usuário > WDEV', $content,'users');
    }
    
    
    
    /**
     * Método responsável por gravar a utilização de um depoimento
     * @param Request $request
     * @param integer $id
     * @return string
     */
    public static function setEditUser($request, $id){
        //OBTÉM O USUÁRIO DO BANCO DE DADOS
        $obUser = EntityUser::getUserById($id);
        
        //VALIDA A INSTÂNCIA
        if(!$obUser instanceof EntityUser){
            $request->getRouter()->redirect('/admin/users');
        }
        
        //POST VARS
        $postVars = $request->getPostVars();
        $nome = $postVars['nome'] ?? '';
        $email = $postVars['email'] ?? '';
        $senha = $postVars['senha'] ?? '';
        
        //VALIDA O E-MAIL DO USUÁRIO
         $obUser = EntityUser::getUsersByEmail($email);
         if($obUser instanceof EntityUser && $obUser->id != $id){
             //REDIRECIONA O USUÁRIO
             $request->getRouter()->redirect('/admin/users/'.$id.'edit?status=dupicated');
         }
        
        //ATUALIZA A INSTÂNCIA
        $obUser->nome = $nome;
        $obUser->email = $email;
        $obUser->senha = password_hash($senha,PASSWORD_DEFAULT);
        $obUser->atualizar();
        
        
        //REDIRECIONA O USUÁRIO
         $request->getRouter()->redirect('/admin/users/'.$obUser->id.'/edit?status=updated');
    }
    
    
    /**
     * Método responsável por retornar o formulário de edição de um depoimento
     * @param Request $request
     * @param integer $id
     * @return string
     */
    public static function getDeleteUser($request, $id){
        //OBTÉM O DEPOIMENTO DO BANCO DE DADOS
        $obUser = EntityUser::getUserById($id);
        
        //VALIDA A INSTÂNCIA
        if(!$obUser instanceof EntityUser){
            $request->getRouter()->redirect('/admin/users');
        }
        
        //CONTEÚDO DO FORMULÁRIO
        $content = View::render('admin/module/users/delete',[
            'nome'      => $obUser->nome,
            'email'     => $obUser->email
        ]);
        
        //RETORNAR A PÁGINA COMPLETA
        return parent::getPanel('Excluir usuário > WDEV', $content,'users');
    }
    
    /**
     * Método responsável por gravar a utilização de um depoimento
     * @param Request $request
     * @param integer $id
     * @return string
     */
    public static function setDeleteUser($request, $id){
        //OBTÉM O DEPOIMENTO DO BANCO DE DADOS
        $obUser = EntityUser::getUserById($id);
        
        //VALIDA A INSTÂNCIA
        if(!$obUser instanceof EntityUsers){
            $request->getRouter()->redirect('/admin/users');
        }
        
        //EXCLUI O DEPOIMENTO
        $obUser->excluir();
        
        //REDIRECIONA O USUÁRIO
        $request->getRouter()->redirect('/admin/users?status=deleted');
    }
    
}
